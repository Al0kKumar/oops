class => is a user defined data type . eg Hero Alok - here Hero is class and Alok is a object with all properties and 
behaviour of class Hero

object => instance of class 


constructor => its a way of allocating some values in the object during the process of object creation-> with parameterised constructor
constructor and destructor both names are same as of the class , both are called only once during creation and deletion of object
for both respectively


default copy constructor => shallow copy of a object is copied , it means that if the object from which new object in copied ,
if there is any change in the values of the properties then it will change in all its copies 


userdefined copy constructor => deep copy is made 


destructor => its work is to deallocate the memory as the object scope ends 



4 pillars of OOPs :-
1. Encapsulation(a.k.a data/information hiding) - wrapping up of data members/properties and functions/methods/behaviour in a single 
entity Class just like a capsule.
2. Inheritance - Inheriting properties and functions from parent class to child class.
3. Polymorphism -  
type of Polymorphism :-
  *Compile time Polymorphism :-
    *function overloading - same function name will work only if one has 0 parameters/arguments , others have differnt maybe 1,2,or more ,
    and differnt return types won't make a diffence so it won't work.
    *Operator overloading - we can do some custom work from normal Operators like , we can do substarction using + via doing
    some custom stuff.
  *Runtime Polymorphism :-
    *Method Overriding - done via Inheritance , here some child class can change the content of a function/methods that he 
    inherites from parent but but the name of function should be same as the parent.
4. Abstraction(a.k.a Implementation hiding) - showing only what is needed and not the stuff how things work under the hood.


